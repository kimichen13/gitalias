[alias]

  # setup: Sets up the Git aliases by configuring the topic base branch and Jira prefix.
  setup = "!f(){ \
    existing_branch=\"$(git config --get init.topicBaseBranchName)\"; \
    if [ -n \"$existing_branch\" ]; then \
      printf \"Current topic base branch: %s\n\" \"$existing_branch\"; \
      read -r -p \"Do you want to reset topic base branch? (y/N) \" reset_branch; \
      if [ \"$reset_branch\" = \"y\" ] || [ \"$reset_branch\" = \"Y\" ]; then \
        git set-topic-branch; \
      fi; \
    else \
      git set-topic-branch; \
    fi; \
    \
    existing_prefix_global=\"$(git config --global --get jira.prefix)\"; \
    existing_prefix_local=\"$(git config --local --get jira.prefix)\"; \
    if [ -n \"$existing_prefix_global\" ] || [ -n \"$existing_prefix_local\" ]; then \
      [ -n \"$existing_prefix_global\" ] && printf \"Current global Jira prefix: %s\n\" \"$existing_prefix_global\"; \
      [ -n \"$existing_prefix_local\" ] && printf \"Current local Jira prefix: %s\n\" \"$existing_prefix_local\"; \
      read -r -p \"Do you want to reset Jira prefix? (y/N) \" reset_prefix; \
      if [ \"$reset_prefix\" = \"y\" ] || [ \"$reset_prefix\" = \"Y\" ]; then \
        git set-jira-prefix; \
      fi; \
    else \
      git set-jira-prefix; \
    fi; \
  };f"

  # set-topic-branch: Prompts the user to enter the desired topic base branch name and sets it globally.
  set-topic-branch = "!f(){ \
      read -r -p \"Enter the desired topic base branch name: \" topic_branch; \
      git config --global init.topicBaseBranchName \"$topic_branch\"; \
      printf \"Topic base branch name set to: %s\n\" \"$topic_branch\"; \
  };f"

  # set-jira-prefix: Prompts the user to enter the desired Jira prefix and sets it globally or locally based on user input.
  set-jira-prefix = "!f(){ \
    read -r -p \"Enter the desired Jira prefix: \" jira_prefix; \
    read -r -p \"Set this prefix globally (g) or locally (l)? \" scope; \
    if [ \"$scope\" = \"g\" ]; then \
        git config --global jira.prefix \"$jira_prefix\"; \
        printf \"Jira prefix set to %s globally\n\" \"$jira_prefix\"; \
    elif [ \"$scope\" = \"l\" ]; then \
        git config --local jira.prefix \"$jira_prefix\"; \
        printf \"Jira prefix set to %s locally\n\" \"$jira_prefix\"; \
    else \
        printf \"Invalid scope. Please enter 'g' for global or 'l' for local.\n\"; \
    fi; \
  };f"

  ##########################################################################
  ### Topic branch aliases
  ##########################################################################

  # topic-base-branch: Retrieves the topic base branch name from Git configuration or defaults to main/master
  topic-base-branch = "!f() { \
    configured_branch=\"$(git config --get init.topicBaseBranchName)\"; \
    if [ -n \"$configured_branch\" ]; then \
      echo \"$configured_branch\"; \
      return; \
    fi; \
    if git rev-parse --verify main >/dev/null 2>&1; then \
      echo \"main\"; \
    elif git rev-parse --verify master >/dev/null 2>&1; then \
      echo \"master\"; \
    else \
      echo \"main\"; \
    fi \
  };f"

  # Start a topic branch.
  #
  # Example:
  #
  #     git topic-begin add-feature-foo
  #
  # We use this alias to begin work on a new feature,
  # new task, new fix, new refactor, new optimization, etc.
  #
  # Customize this alias as you like for your own workflow.
  #
  # Our workflow does these steps:
  #
  #   1. Update the base branch.
  #   2. Create a new branch with your topic name, based on the base branch.
  #   3. Push the topic branch, so our team members can see the new branch.
  #
  # If you use a sharing site such a GitHub, and use typical settings,
  # then this implementation makes your branch visible to collaborators.
  #
  # Many teams share branches before they are fully ready, to help
  # the team provide feedback on the work-in-progress, and also to
  # run any automatic tests to verify the branch runs successfully.
  topic-begin = "!f(){ \
    new_branch=\"$1\"; \
    old_branch=\"$(git topic-base-branch)\"; \
    git checkout \"$old_branch\"; \
    git pull --ff-only; \
    git checkout -b \"$new_branch\" \"$old_branch\"; \
    git push --set-upstream origin \"$new_branch\"; \
  };f"

  # jira: Create a new branch with Jira prefix (if available) and based on the existing 'topic-begin' alias.
  jira = "!f() { \
    if [ -z \"$1\" ] || [ -z \"$2\" ] || [ -z \"$3\" ]; then \
      printf \"Usage: git jira <prefix> <ticket-number> <description>\n\"; \
      return 1; \
    fi; \
    prefix=\"$1\"; \
    jira_id=\"$(git config jira.prefix)\"; \
    description=\"$(echo \"$3\" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-zA-Z0-9-]/-/g' | sed 's/-\\\\+-/-/g' | sed 's/^-\\\\|-$//g')\"; \
    if [[ -n $jira_id ]]; then \
        branch_name=\"$prefix/$jira_id$2-$description\"; \
    else \
        branch_name=\"$prefix/$2-$description\"; \
    fi; \
    git topic-begin \"$branch_name\"; \
  }; f"

  # jira-rebase: Rebase the current Jira topic branch onto the base topic branch.
  jira-rebase = "!f() { \
    git fetch && git rebase origin/$(git topic-base-branch); \
  }; f"

  # topic-end: Stop a topic branch; this must be the current branch.
  #
  # Example:
  #
  #     git topic-end
  #
  # We use this alias to complete work on a new feature,
  # new task, new fix, new refactor, new optimization, etc.
  #
  # Customize this alias as you like for your own workflow.
  #
  # Our workflow does these steps:
  #
  #   1. Push the topic branch.
  #   2. Delete the topic branch locally.
  #   3. Delete the topic branch remotely.
  #
  # If you use a sharing site such a GitHub, and use typical settings,
  # then this implementation deletes your branch for the site.
  #
  # Many teams choose to delete topic branches when they are finished,
  # to keep the repositories clean and with a smaller number of branches.
  #
  # If git says "unable to push to unqualified destination" then it means
  # that the remote branch doesn't exist, so git is unable to delete it.
  # That's fine; it means someone else has already deleted the branch.
  # To synchronize your branch list, use "git fetch --prune".
  topic-end = "!f(){ \
    new_branch=\"$(git current-branch)\"; \
    old_branch=\"$(git topic-base-branch)\"; \
    if [ \"$new_branch\" = \"$old_branch\" ]; then \
      printf \"You are asking to do git topic-end,\n\"; \
      printf \"but you are not on a new topic branch;\n\"; \
      printf \"you are on the base topic branch: %s.\n\" \"$old_branch\"; \
      printf \"Please checkout the topic branch that you want,\n\"; \
      printf \"then retry the git topic-end command.\n\"; \
      return 1; \
    fi; \
    if ! git diff-index --quiet HEAD --; then \
      printf \"You have uncommitted changes. Please commit or stash them first.\n\"; \
      return 1; \
    fi; \
    git push; \
    git checkout \"$old_branch\"; \
    git branch --delete \"$new_branch\"; \
    git push origin \":$new_branch\"; \
  };f"

  ### publish & unpublish ###

  # publish: Publish the current branch by pushing it to the remote "origin",
  # and setting the current branch to track the upstream branch.
  publish = "!f() { git push --set-upstream \"${1:-origin}\" \"$(git current-branch)\"; }; f"

  # unpublish: Unpublish the current branch by deleting the
  # remote version of the current branch.
  unpublish = "!f() { git push \"${1:-origin}\" :\"$(git current-branch)\"; }; f"

  ### Work In Progress ###
  # wip: Adds all new and modified files to the index, and removes deleted files.
  # Commits the changes with the message "wip".
  wip = "!git add --all; git ls-files --deleted -z | xargs -r -0 git rm; git commit --message=wip"

  # unwip: Resets the last commit if the commit message is "wip".
  unwip = "!git log --max-count=1 | grep -q -c wip && git reset HEAD~1"

  ### Core utility aliases ###
  
  # Show the default branch name
  default-branch = config init.defaultBranch

  # Show the current branch name
  # Newer versions of git can do: git branch --show-current
  current-branch = rev-parse --abbrev-ref HEAD

  # topic-list: List all topic branches, both local and remote
  topic-list = "!f() { \
    printf \"Local topic branches:\n\"; \
    git branch --list --no-color | grep -v \"^* $(git topic-base-branch)$\" | sed 's/^  //'; \
    printf \"\nRemote topic branches:\n\"; \
    git branch -r --list --no-color | grep \"origin/\" | grep -v \"origin/$(git topic-base-branch)$\" | sed 's/^  origin\\///'; \
  };f"

  ##########################################################################
  ### Commonly used shortcuts
  ##########################################################################

  # Short form commands
  a = add
  b = branch
  c = commit
  d = diff
  f = fetch
  l = log
  m = merge
  o = checkout
  p = pull
  s = status

  # Frequently used command variations
  aa = add --all
  ap = add --patch
  cm = commit --message
  ca = commit --amend
  cane = commit --amend --no-edit

  ##########################################################################
  ### Status & Info aliases
  ##########################################################################

  # Status shortcuts
  ss = status --short
  ssb = status --short --branch

  # Show branch info
  bv = branch --verbose
  bvv = branch --verbose --verbose

  ##########################################################################
  ### Reset & Undo aliases
  ##########################################################################

  # Reset operations
  reset-commit = reset --soft HEAD~1
  reset-commit-hard = reset --hard HEAD~1
  uncommit = reset --soft HEAD~1
  unadd = reset HEAD

  # Clean working directory
  discard = checkout --
  cleanout = !git clean -df && git checkout -- .

  ##########################################################################
  ### Sync & Update aliases
  ##########################################################################

  # Sync operations
  get = !git fetch --prune && git pull --rebase && git submodule update --init --recursive
  put = !git commit --all && git push

  # Push/pull for current branch
  push1 = "!git push origin \"$(git current-branch)\""
  pull1 = "!git pull origin \"$(git current-branch)\""

  # Safe force push
  pushy = push --force-with-lease

  ##########################################################################
  ### Stash operations
  ##########################################################################

  # Take a snapshot without removing changes
  snapshot = "!git stash push --include-untracked --message \"snapshot: $(date)\" && git stash apply \"stash@{0}\" --index"

  ##########################################################################
  ### Log & History aliases
  ##########################################################################

  # Log variations
  lg = log --graph
  lo = log --oneline
  ll = log --graph --topo-order --date=short --abbrev-commit --decorate --all --boundary --pretty=format:'%Cblue%ad %C(auto)%h%Creset -%C(auto)%d%Creset %s %Cblue[%aN]%Creset %Cblue%G?%Creset'

  # Show who contributed
  who = shortlog --summary --numbered --no-merges

  ##########################################################################
  ### Utility aliases
  ##########################################################################

  # Show all aliases
  aliases = "!git config --get-regexp '^alias\\.' | cut -c 7- | sed 's/ / = /'"

  # Emergency backup
  panic = "!tar cvf ../panic.tar -- *"